plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.yunify'
version = '2.2.18'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'qingstor.sdk.java'  // this should be replaced near future.

            from components.java

            pom {
                name = 'qingstor-sdk-java'
                description = 'The official QingStor SDK for the Java programming language.'
                url = 'http://www.qingcloud.com'
                properties = [
                        "project.build.sourceEncoding": "UTF-8"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yunify'
                        name = 'yunify'
                        email = 'sdk_group@yunify.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:yunify/qingstor-sdk-java.git'
                    developerConnection = 'scm:git:git@github.com:yunify/qingstor-sdk-java.git'
                    url = 'https://github.com/qingstor/qingstor-sdk-java'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'deploy'
            def stagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = project.hasProperty('release') ? stagingRepoUrl : snapshotsRepoUrl
            credentials {
                username = deployRepoUsername
                password = deployRepoPassword
            }
        }
        // local repo. For test usage.
        // maven {
        //     name = 'myRepo'
        //     url = "file://${buildDir}/repo"
        // }
    }
}

signing {
    sign publishing.publications.mavenJava
}

//task sourcesJar(type: Jar) {
//    archiveClassifier = 'sources'
//    from sourceSets.main.allSource
//}
//
//task javadocJar(type: Jar) {
//    archiveClassifier = 'javadoc'
//    from javadoc.destinationDir
//}

project.ext {
    cucumberVersion = '1.2.5'
}

configurations {
    formatComile
    providedCompile
    testProvidedCompile
    compile.extendsFrom providedCompile
}

def Version = "-2.2.17"

//create a single Jar with all dependencies
task buildIncludeDependentJar(type: Jar) {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
    archiveBaseName = project.name + Version + '-all-deps'
    from {
        (configurations.runtime - configurations.testProvidedCompile).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

//create a single Jar with all dependencies
task buildTestJar(type: Jar) {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
    archiveBaseName = project.name + '-test' + Version
    from { configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

//create a single Jar with no dependencies
task buildJar(type: Jar) {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
    archiveBaseName = project.name + Version
    from {
        (configurations.runtime - configurations.providedCompile).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task formatGenerateCode(type: JavaExec) {
    main 'com.google.googlejavaformat.java.Main'
    classpath configurations.formatComile
    args '-a', '-r', 'src/main/java/com/qingstor/sdk/service/Bucket.java',
            'src/main/java/com/qingstor/sdk/service/QingStor.java',
            'src/main/java/com/qingstor/sdk/service/Types.java'
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.json:json:20140107'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'org.yaml:snakeyaml:1.17'
    implementation 'com.google.code.gson:gson:2.8.2'
    formatComile 'com.google.googlejavaformat:google-java-format:1.1:all-deps'

    providedCompile 'org.json:json:20140107'
    providedCompile 'com.squareup.okhttp3:okhttp:3.11.0'
    providedCompile 'org.yaml:snakeyaml:1.17'
    providedCompile 'info.cukes:cucumber-java:' + cucumberVersion
    providedCompile 'info.cukes:cucumber-junit:' + cucumberVersion

    testProvidedCompile 'info.cukes:cucumber-java:' + cucumberVersion
    testProvidedCompile 'info.cukes:cucumber-junit:' + cucumberVersion

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testImplementation 'junit:junit:4.12'
    testImplementation 'info.cukes:cucumber-java:' + cucumberVersion
    testImplementation 'info.cukes:cucumber-junit:' + cucumberVersion
    testImplementation 'org.json:json:20140107'
    testImplementation 'com.squareup.okhttp3:okhttp:3.11.0'
    testImplementation 'org.yaml:snakeyaml:1.17'
}
