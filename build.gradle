/*
 * This build file was auto generated by running the Gradle 'init' task
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

project.ext {
    cucumberVersion = '1.2.5'
}


configurations {
	formatComile
    providedCompile
    testProvidedCompile
    compile.extendsFrom providedCompile
}

def Version = "-2.1.9"

//create a single Jar with all dependencies
task buildIncludeDependentJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
        	'Implementation-Version': Version
    }
    baseName = project.name + Version+'-all-deps'
    from {
            (configurations.runtime - configurations.testProvidedCompile).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        } {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }
    with jar
}

//create a single Jar with all dependencies
task buildTestJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
        	'Implementation-Version': Version
    }
    baseName = project.name + '-test'+Version
    from { configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}


//create a single Jar with no dependencies
task buildJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File ',
        	'Implementation-Version': Version
    }
    baseName = project.name +Version
    from {
        (configurations.runtime - configurations.providedCompile).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task formatGenerateCode(type: JavaExec) {

	main 'com.google.googlejavaformat.java.Main'
    classpath configurations.formatComile
    args  '-a','-r','src/main/java/com/qingstor/sdk/service/Bucket.java',
                    'src/main/java/com/qingstor/sdk/service/QingStor.java',
                    'src/main/java/com/qingstor/sdk/service/Types.java'

}


// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.json:json:20140107'
    compile 'com.squareup.okhttp3:okhttp:3.2.0'

    formatComile 'com.google.googlejavaformat:google-java-format:1.1:all-deps'

    providedCompile 'org.json:json:20140107'
    providedCompile 'com.squareup.okhttp3:okhttp:3.2.0'
    providedCompile 'info.cukes:cucumber-java:' + cucumberVersion
    providedCompile 'info.cukes:cucumber-junit:' + cucumberVersion

    testProvidedCompile 'info.cukes:cucumber-java:' + cucumberVersion
    testProvidedCompile 'info.cukes:cucumber-junit:' + cucumberVersion

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    testCompile 'info.cukes:cucumber-java:' + cucumberVersion
    testCompile 'info.cukes:cucumber-junit:' + cucumberVersion
    testCompile 'org.json:json:20140107'
    testCompile 'com.squareup.okhttp3:okhttp:3.2.0'
}
