plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id("com.diffplug.spotless") version "6.13.0" // the last jdk8 compatible version.
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.yunify'
// Pass command-line option: -Psdk_version=x.x.x if you want build a different version.
version = findProperty('sdk_version') ?: '2.6.3'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility(JavaVersion.VERSION_1_8)
    targetCompatibility(JavaVersion.VERSION_1_8)

    withJavadocJar()
    withSourcesJar()
}

def sharedManifest = java.manifest {
    attributes("Implementation-Title": project.name,
        "Implementation-Version": project.version)
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

tasks.named('shadowJar', ShadowJar) {
    archiveClassifier.set('all-deps')
    archiveVersion.set(project.version.toString())

    enableRelocation true
    relocationPrefix "qingstor"

}

tasks {
    compileJava {
        configure options.encoding("UTF-8")
    }
    compileTestJava {
        configure options.encoding("UTF-8")
    }
    jar {
        manifest = java.manifest {
            from sharedManifest
        }
    }
    javadoc {
        options.encoding("UTF-8")
        // see: https://github.com/gradle/gradle/pull/8321
        if (JavaVersion.current().java9Compatible) {
            if (JavaVersion.current().java11Compatible && !JavaVersion.current().java12Compatible) {
                options.addBooleanOption('-no-module-directories', true)
            }
            options.addBooleanOption('html5', true)
        }
    }
    tasks.register('versionProperties') {
        doLast {
            mkdir "$buildDir/resources/main"
            new File("$buildDir/resources/main/version.properties").withWriter { w ->
                Properties p = new Properties()
                p['version'] = project.version.toString()
                p.store w, null
            }
        }
    }
    classes {
        dependsOn versionProperties
    }
    build {
        dependsOn shadowJar
    }
}

// publish only unshadowed artifacts
components.java.withVariantsFromConfiguration(configurations.shadowRuntimeElements) {
    skip()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId = 'qingstor.sdk.java'  // this should be replaced near future.

            pom {
                name = project.name
                description = 'The official QingStor SDK for the Java programming language.'
                url = 'https://www.qingcloud.com/products/qingstor/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yunify'
                        name = 'yunify'
                        email = 'sdk_group@yunify.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:yunify/qingstor-sdk-java.git'
                    developerConnection = 'scm:git:git@github.com:yunify/qingstor-sdk-java.git'
                    url = 'https://github.com/qingstor/qingstor-sdk-java'
                }
            }
        }
    }
    repositories {
        // local repo for test usage, redirect output to this for verification before upload.
        // or use ./gradlew publishToMavenLocal
        // maven {
        //     name = "myRepo"
        //     url = uri("file://${buildDir}/repo")
        // }
        maven {
            name = "mavencentral"
            url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("SONATYPE_NEXUS_USERNAME")
                password = System.getenv("SONATYPE_NEXUS_PASSWORD")
            }
        }
    }
}

signing {
    // https://docs.gradle.org/current/userguide/signing_plugin.html#sec:specifying_what_to_sign
    sign publishing.publications.maven
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    api 'com.squareup.okhttp3:okhttp:4.12.0'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.3'
    implementation 'org.json:json:20231013'
    // it's library's consumer's responsibility to choose a log implementation(and set log_level.)
    implementation 'org.slf4j:slf4j-api:1.7.32'
    testImplementation 'io.cucumber:cucumber-java:7.0.0'
    testImplementation 'io.cucumber:cucumber-junit:7.0.0'
    testImplementation 'ch.qos.logback:logback-classic:1.2.6'
}

task cucumber() {
    dependsOn assemble, testClasses
    doLast {
        javaexec {
            main = 'io.cucumber.core.cli.Main'
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'integration.cucumber', 'tests/features']
        }
    }
}

spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        // switch to AOSP style
        googleJavaFormat('1.7').aosp()
        // Add license to every java file.
        licenseHeaderFile rootProject.file('spotless.license.java')
    }
}
