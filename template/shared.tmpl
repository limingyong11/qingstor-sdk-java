{{define "RenderOperationValidate"}}
    {{- $capsule := index . 0 -}}
    {{- $belongs := index . 1 -}}
    {{- $operation := index . 2 -}}

    {{- $opID := $operation.ID | camelCase -}}
    @Override
    public String validateParam() {
        {{- template "ValidateCustomizedType" $operation.Request.Query -}}
        {{- template "ValidateCustomizedType" $operation.Request.Headers -}}
        {{- template "ValidateCustomizedType" $operation.Request.Elements }}

        return null;
    }
{{end}}

{{define "ValidateCustomizedType"}}
    {{- $customizedType := . -}}

    {{- range $_, $property := $customizedType.Properties -}}
        {{- $isNormalType :=  (eq $property.Type "string") -}}
        {{- $isContentLength := eq $property.ID "Content-Length" -}}
        {{- if and $isNormalType (not $isContentLength) -}}
            {{- if $property.IsRequired }}
                {{- if eq ($property.ID | camelCase) "ContentMD5" }}
                {{- else -}}
                    if (QSStringUtil.isEmpty(this.get{{$property.ID | camelCase}}())) {
                        return QSStringUtil.getParameterRequired("{{$property.ID | camelCase}}","{{$customizedType.ID | camelCase}}");
                    }
                {{- end -}}
            {{- end -}}
            {{- if gt ($property.Enum | len) 0 }}
                String[] {{$property.ID | camelCase | lowerFirst -}}
                ValidValues = {
                    {{- $property.Enum | commaConnectedWithQuote -}}
                };

                boolean {{$property.ID | camelCase | lowerFirst}}IsValid = false;
                String value = this.get{{$property.ID | camelCase}}();
                if (null == value || "".equals(value)) {
                    {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                } else {
                    for(String v : {{$property.ID | camelCase | lowerFirst}}ValidValues) {
                        if(v.equals(value)){
                            {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                        }
                    }
                }

                if (!{{$property.ID | camelCase | lowerFirst}}IsValid) {
                    return QSStringUtil.getParameterValueNotAllowedError("{{$property.ID | camelCase}}",
                            this.get{{$property.ID | camelCase}}()+"",
                            {{$property.ID | camelCase | lowerFirst}}ValidValues);
                }
            {{- end -}}
        {{- end -}}

        {{- $isNormalType :=  (eq $property.Type "integer") -}}
        {{- $isContentLength := eq $property.ID "Content-Length" -}}
        {{- if and $isNormalType (not $isContentLength) -}}
            {{- if $property.IsRequired }}
                if (this.get{{$property.ID | camelCase}}() < 0 ) {
                    return QSStringUtil.getParameterRequired("{{$property.ID | camelCase}}","{{$customizedType.ID | camelCase}}");
                }
            {{- end -}}
            {{- if gt ($property.Enum | len) 0}}
                String[] {{$property.ID | camelCase | lowerFirst -}}
                ValidValues = {
                    {{- $property.Enum | commaConnectedWithQuote -}}
                };
                boolean {{$property.ID | camelCase | lowerFirst}}IsValid = false;
                String value = this.get{{$property.ID | camelCase}}() + "";
                if(value == "") {
                    {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                } else {
                    for(String v : {{$property.ID | camelCase | lowerFirst}}ValidValues){
                        if(v.equals(value)) {
                            {{$property.ID | camelCase | lowerFirst}}IsValid = true;
                        }
                    }
                }

                if (!{{$property.ID | camelCase | lowerFirst}}IsValid) {
                    return QSStringUtil.getParameterValueNotAllowedError("{{$property.ID | camelCase}}",
                            this.get{{$property.ID | camelCase}}()+"",
                            {{$property.ID | camelCase | lowerFirst}}ValidValues);
                }
            {{end -}}
        {{- end -}}

        {{if eq $property.Type "map"}}
            {{if eq $property.ID "X-QS-MetaData" }}
                Map<String, String> metadata = this.get{{$property.ID | camelCase}}();
                if (metadata != null) {
                    String vValidate = QSParamInvokeUtil.metadataIsValid(metadata);
                    if (!QSStringUtil.isEmpty(vValidate)) {
                        return vValidate;
                    }
                }
            {{end -}}
        {{- end -}}

        {{- if eq $property.Type "object" }}
            if (this.get{{$property.ID | camelCase}}() != null) {
                String vValidate = this.get{{$property.ID | camelCase}}().validateParam();
                if (!QSStringUtil.isEmpty(vValidate)) {
                    return vValidate;
                }
            }
            {{ if $property.IsRequired -}}
                if (this.get{{$property.ID | camelCase}}() == null) {
                    return QSStringUtil.getParameterRequired(
                        "{{$property.ID | camelCase}}",
                        "{{$customizedType.ID | camelCase}}");
                }
            {{- end -}}
        {{- end -}}

        {{- if eq $property.Type "array" -}}

            {{- $isNotString := ne $property.ExtraType "string" -}}
            {{- $isNotInteger := ne $property.ExtraType "integer"}}
            {{- $isNotTimestamp := ne $property.ExtraType "timestamp" -}}
            {{- if and $isNotString $isNotInteger $isNotTimestamp}}
                if (this.get{{$property.ID | camelCase}}() != null && this.get{{$property.ID | camelCase}}().size() > 0 ) {
                    for (int i = 0 ; i < this.get{{$property.ID | camelCase}}().size() ; i++ ) {
                        String vValidate = this.get{{$property.ID | camelCase}}().get(i).validateParam();
                        if (!QSStringUtil.isEmpty(vValidate)) {
                            return vValidate;
                        }
                    }
                }
            {{- end -}}
        {{- end -}}
    {{- end -}}
{{- end -}}

{{define "RenderProperties"}}
	{{- $customizedType := index . 0 -}}
	{{- $propertyExtraTags := index . 1 -}}
    {{- $operationName := index . 2 -}}

	{{range $_, $property := $customizedType.Properties -}}
        {{if or (ne $operationName "Delete Multiple Objects") (ne $property.ID "Content-MD5") -}}
            /**
            {{if $property.Description -}}
                * {{$property.Description}}
            {{end -}}
            {{if $property.Enum -}}
                * {{$property.ID | camelCase}}'s available values: {{$property.Enum | commaConnected}}
            {{end -}}

            {{if $property.IsRequired -}}
                * Required
            {{- end}}
            */
            {{template "PropertyTags" passThrough $property $propertyExtraTags}}
        {{- end}}
	{{end}}
{{end}}

{{define "Type"}}
	{{- $typeName := . -}}

	{{- if eq $typeName "string" -}}
		String
	{{- else if eq $typeName "boolean" -}}
		Boolean
	{{- else if eq $typeName "integer" -}}
		Integer
    {{- else if eq $typeName "long" -}}
        Long
	{{- else if eq $typeName "timestamp" -}}
		String
	{{- else if eq $typeName "binary" -}}
		InputStream
	{{- else if eq $typeName "array" -}}
		List
	{{- else if eq $typeName "object" -}}
		Object
	{{- else if eq $typeName "map" -}}
		Map
	{{- else if eq $typeName "any" -}}
		Object
	{{- else -}}
		{{$typeName | camelCase}}Model
	{{- end -}}
{{end}}

{{define "PropertyType"}}
	{{- $property := . -}}

	{{- if eq $property.Type "object" -}}
		{{template "Type" $property.ExtraType}}
	{{- else if eq $property.Type "array" -}}
		List<{{template "Type" $property.ExtraType}}>
	{{- else if eq $property.Type "map" -}}
		Map<String, String>
	{{- else if eq $property.Type "any" -}}
		{{template "Type" $property.Type}}
	{{- else -}}
		{{template "Type" $property.Type}}
	{{- end -}}
{{end}}

{{define "PropertyTags"}}
	{{- $property := index . 0 -}}
	{{- $propertyExtraTags := index . 1 -}}

    {{- printf `%s  ` "private" -}}

    {{template "PropertyType" $property}}
    {{- printf `  %s;` ($property.ID | camelCase | lowerFirst) -}}

    {{ printf ` public void set%s` ($property.ID | camelCase) -}}
    {{- printf `%s` "(" -}}
    {{template "PropertyType" $property}}
    {{- printf ` %s){` ($property.ID | camelCase | lowerFirst) -}}
    {{- printf ` this.%s =` ($property.Name | camelCase | lowerFirst) -}}
    {{- printf ` %s;}` ($property.ID | camelCase | lowerFirst) }}
    {{ printf ` @ParamAnnotation(paramType ="` -}}
    {{- template "PropertyExtraTags" $propertyExtraTags -}}
    {{if eq $propertyExtraTags "header" -}}
        {{ printf `", paramName = "%s")` ($property.Name | lower) }}
    {{- else -}}
        {{ printf `", paramName = "%s")` ($property.Name | normalized) }}
    {{- end}}
    {{ printf ` %s` "public " -}}
    {{template "PropertyType" $property}}
    {{- printf ` get%s(){` ($property.ID | camelCase) -}}

    {{- printf ` return this.%s;}` ($property.ID | camelCase | lowerFirst) -}}
{{end}}

{{define "PropertyExtraTags"}}
    {{- $propertyExtraTags := . -}}
    {{- if $propertyExtraTags -}}
        {{- printf "%s" $propertyExtraTags -}}
    {{- end -}}
{{end}}

{{define "PropertyTagsQuery"}}
	{{- $property := . -}}

    {{- printf `%s  ` "private" -}}

    {{template "PropertyType" $property}}
    {{- printf `  %s;` ($property.ID | camelCase | lowerFirst) -}}

    {{ printf ` public void set%s` ($property.ID | camelCase) -}}
    {{- printf `%s` "(" -}}
    {{template "PropertyType" $property}}
    {{- printf ` %s){` ($property.ID | camelCase | lowerFirst) -}}
    {{- printf ` this.%s =` ($property.Name | camelCase | lowerFirst) -}}
    {{- printf ` %s;}` ($property.ID | camelCase | lowerFirst) }}

    {{ printf ` @ParamAnnotation(paramType = "query", paramName = "%s")` ($property.Name | normalized) }}
    {{ printf ` %s` "public " -}}
    {{template "PropertyType" $property}}
    {{- printf ` get%s(){` ($property.ID | camelCase) -}}

    {{- printf ` return this.%s ;}` ($property.ID | camelCase | lowerFirst) -}}

{{end}}

{{define "PropertyTagsBody"}}
	{{- $property := . -}}

    {{- printf `%s  ` "private" -}}

    {{template "PropertyType" $property}}
    {{- printf `  %s;` ($property.ID | camelCase | lowerFirst) -}}

    {{ printf ` public void set%s` ($property.ID | camelCase) -}}
    {{- printf `%s` "(" -}}
    {{template "PropertyType" $property}}
    {{- printf ` %s){` ($property.ID | camelCase | lowerFirst) -}}
    {{- printf ` this.%s =` ($property.Name | camelCase | lowerFirst) -}}
    {{- printf ` %s;}` ($property.ID | camelCase | lowerFirst) }}

    {{ printf ` @ParamAnnotation(paramType = "body", paramName = "%s")` ($property.Name | normalized) }}
    {{ printf ` %s` "public " -}}
    {{template "PropertyType" $property}}
    {{- printf ` get%s(){` ($property.ID | camelCase) -}}

    {{- printf ` return this.%s ;}` ($property.ID | camelCase | lowerFirst) -}}
{{end}}

{{define "PropertyTagsHeader"}}
	{{- $property := . -}}

    {{- printf `%s ` "private" -}}

    {{template "PropertyType" $property}}
    {{- printf `  %s;` ($property.ID | camelCase | lowerFirst) -}}

    {{ printf ` public void set%s` ($property.ID | camelCase) -}}
    {{- printf `%s` "(" -}}
    {{template "PropertyType" $property}}
    {{- printf ` %s){` ($property.ID | camelCase | lowerFirst) -}}
    {{- printf ` this.%s =` ($property.Name | camelCase | lowerFirst) -}}
    {{- printf ` %s;}` ($property.ID | camelCase | lowerFirst) }}

    {{ printf ` @ParamAnnotation(paramType = "header", paramName = "%s")` ($property.Name | lower) }}
    {{ printf ` %s` "public " -}}
    {{template "PropertyType" $property}}
    {{- printf ` get%s(){` ($property.ID | camelCase) -}}

    {{- printf ` return this.%s ;}` ($property.ID | camelCase | lowerFirst) -}}
{{end}}

{{define "RenderOperation"}}
	{{$service := index . 0}}
	{{$operation := index . 1}}

    {{$belongs := replace $service.Name "QingStor" "Service" -1}}
    {{$belongs := replace $belongs "Object" "Bucket" -1}}
	{{$opID := $operation.ID | camelCase}}

    {{$isBucket := eq $service.Name "Bucket"}}
    {{$isObject := eq $service.Name "Object"}}

    {{$hasQuery := gt (len $operation.Request.Query.Properties) 0}}
    {{$hasHeaders := gt (len $operation.Request.Headers.Properties) 0}}
    {{$hasElements := gt (len $operation.Request.Elements.Properties) 0}}
    {{$hasStringBody := eq $operation.Request.Body.Type "string"}}
    {{$hasBinaryBody := eq $operation.Request.Body.Type "binary"}}
    {{$hasInput := or $hasQuery $hasHeaders $hasElements $hasStringBody $hasBinaryBody}}

    /**
    {{- if $isObject}}
    * @param objectName name of the object
    {{- end}}
    {{- if $hasInput}}
    * @param input input
    {{- end}}
    * @throws QSException exception
    * @return {{$opID}}Output output stream
    * Documentation URL: <a href="{{$operation.DocumentationURL}}"> {{$operation.DocumentationURL}} </a>
    */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public {{$opID}}Output
    {{if eq $belongs "Bucket" -}}
        {{$methodName := replace $opID "Bucket" "" -1 | camelCase | lowerFirst }}
        {{$methodName}}
    {{- else -}}
        {{$methodName := $opID | camelCase | lowerFirst }}
        {{$methodName}}
    {{- end -}}(
    {{- if $isObject}}
        String objectName
        {{- if $hasInput}}, {{$opID}}Input input{{end -}}
    {{- else -}}
        {{- if $hasInput}}{{$opID}}Input input{{end -}}
    {{end}}
    ) throws QSException {
        {{- if $hasInput}}
            if (input == null ){
                input = new {{$opID}}Input();
            }
        {{end}}
        RequestHandler requestHandler = this.
        {{- if eq $belongs "Bucket" -}}
            {{replace $opID "Bucket" "" -1 | camelCase | lowerFirst -}}
        {{else -}}
            {{$opID | camelCase | lowerFirst -}}
        {{end -}}Request(
        {{- if $isObject}}
            objectName
            {{- if $hasInput}}, input{{end -}}
        {{- else -}}
            {{- if $hasInput}}input{{end -}}
        {{end}}
        );

        OutputModel backModel = requestHandler.send();
        if (backModel != null) {
            return ({{$opID}}Output)backModel;
        }
        return null;
    }

    /**
    {{- if $isObject}}
    * @param objectName name of the object
    {{- end}}
    {{- if $hasInput}}
    * @param input input
    {{- end}}
    * @throws QSException exception
    * @return RequestHandler http request handler
    * Documentation URL: <a href="{{$operation.DocumentationURL}}">{{$operation.DocumentationURL}}</a>
    */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public RequestHandler
    {{if eq $belongs "Bucket" -}}
        {{$methodPrefix := replace $opID "Bucket" "" -1 | camelCase | lowerFirst }}
        {{$methodPrefix}}
    {{- else -}}
        {{$methodPrefix := $opID | camelCase | lowerFirst }}
        {{$methodPrefix}}
    {{- end -}}Request(
    {{- if $isObject}}
        String objectName
        {{- if $hasInput}}, {{$opID}}Input input{{end -}}
    {{- else -}}
        {{- if $hasInput}}{{$opID}}Input input{{end -}}
    {{end}}
    ) throws QSException {
        {{- if $hasInput}}
            if (input == null ){
                input = new {{$opID}}Input();
            }
        {{end}}

        {{$path := $operation.Request.Path}}
        {{$path := replace $path "{" "<" -1}}
        {{$path := replace $path "}" ">" -1}}
        {{$path := dashConnected $path}}

        Map<String, Object> context = new HashMap<>();
        context.put(QSConstant.PARAM_KEY_REQUEST_ZONE, this.zone);
        context.put(QSConstant.ENV_CONTEXT_KEY, this.envContext);
        context.put("OperationName","{{$opID}}");
        context.put("APIName","{{$opID}}");
        context.put("ServiceName","{{$operation.Name}}");
        context.put("RequestMethod","{{$operation.Request.Method}}");
        context.put("RequestURI","{{$path}}");

        {{if ne $belongs "Service" -}}
            context.put("bucketNameInput",this.bucketName);
            if (QSStringUtil.isEmpty(bucketName)) {
                throw new QSException("bucketName can't be empty!");
            }
        {{- end}}
        {{if $isObject -}}
            context.put("objectNameInput",objectName);
            if (QSStringUtil.isEmpty(objectName)) {
                throw new QSException("objectName can't be empty!");
            }
        {{- end}}

        RequestHandler requestHandler =
            ResourceRequestFactory.getResourceRequest().getRequest(context,
            {{- if $hasInput}}
                input
            {{ else }}
                null
            {{end}},
            {{$opID}}Output.class);

        return requestHandler;
    }

    /**
    {{- if $isObject}}
    * @param objectName name of the object
    {{- end}}
    {{- if $hasInput}}
    * @param input input
    {{- end}}
    * @param callback response callback
    * @throws QSException exception
    *
    * Documentation URL: <a href="{{$operation.DocumentationURL}}">{{$operation.DocumentationURL}}</a>
    */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public void
    {{if eq $belongs "Bucket" -}}
        {{$methodPrefix := replace $opID "Bucket" "" -1 | camelCase | lowerFirst }}
        {{$methodPrefix}}
    {{- else -}}
        {{$methodPrefix := $opID | camelCase | lowerFirst }}
        {{$methodPrefix}}
    {{- end -}}Async(
    {{- if $isObject}}
        String objectName,
        {{- if $hasInput}}{{$opID}}Input input, {{end -}}
    {{- else -}}
        {{- if $hasInput}}{{$opID}}Input input, {{end -}}
    {{end}}
    ResponseCallBack<{{camelCase $operation.ID}}Output> callback) throws QSException {
        {{- if $hasInput}}
            if (input == null ){
                input = new {{$opID}}Input();
            }
        {{end}}

        RequestHandler requestHandler = this.
        {{- if eq $belongs "Bucket" -}}
            {{replace $opID "Bucket" "" -1 | camelCase | lowerFirst -}}
        {{else -}}
            {{$opID | camelCase | lowerFirst -}}
        {{end -}}AsyncRequest(
        {{if $isObject}}objectName,{{end}}
        {{if $hasInput -}}input,{{end -}}
        callback);

        requestHandler.sendAsync();
    }

    /**
    {{- if $isObject}}
    * @param objectName name of the object
    {{- end}}
    {{- if $hasInput}}
    * @param input the input
    {{- end}}
    * @param callback response callback
    * @throws QSException exception
    * @return RequestHandler http request handler
    * Documentation URL: <a href="{{$operation.DocumentationURL}}">{{$operation.DocumentationURL}}</a>
    */
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public RequestHandler
    {{if eq $belongs "Bucket" -}}
        {{$methodPrefix := replace $opID "Bucket" "" -1 | camelCase | lowerFirst }}
        {{$methodPrefix}}
    {{- else -}}
        {{$methodPrefix := $opID | camelCase | lowerFirst }}
        {{$methodPrefix}}
    {{- end -}}AsyncRequest(
    {{- if $isObject}}
        String objectName,
        {{- if $hasInput}}{{$opID}}Input input, {{end -}}
    {{- else -}}
        {{- if $hasInput}}{{$opID}}Input input, {{end -}}
    {{end}}
    ResponseCallBack<{{camelCase $operation.ID}}Output> callback) throws QSException {
        {{- if $hasInput}}
            if (input == null ){
                input = new {{$opID}}Input();
            }
        {{end}}

        {{$path := $operation.Request.Path}}
        {{$path := replace $path "{" "<" -1}}
        {{$path := replace $path "}" ">" -1}}
        {{$path := dashConnected $path}}

        Map<String, Object> context = new HashMap<>();
        context.put(QSConstant.PARAM_KEY_REQUEST_ZONE,this.zone);
        context.put(QSConstant.ENV_CONTEXT_KEY,this.envContext);
        context.put("OperationName","{{$opID}}");
        context.put("APIName","{{$opID}}");
        context.put("ServiceName","{{$operation.Name}}");
        context.put("RequestMethod","{{$operation.Request.Method}}");
        context.put("RequestURI","{{$path}}");

        {{if ne $belongs "Service" -}}
            context.put("bucketNameInput",this.bucketName);
            if (QSStringUtil.isEmpty(bucketName)) {
                throw new QSException("bucketName can't be empty!");
            }
        {{- end}}
        {{if $isObject -}}
            context.put("objectNameInput",objectName);
            if (QSStringUtil.isEmpty(objectName)) {
                throw new QSException("objectName can't be empty!");
            }
        {{- end}}

        if (callback == null) {
            throw new QSException("callback can't be null");
        }

        RequestHandler requestHandler = ResourceRequestFactory.getResourceRequest().getRequestAsync(context,{{- if $hasInput}}
                                                                                                input
                                                                                            {{ else }}
                                                                                                null
                                                                                            {{end}},callback);
        return requestHandler;
    }

    {{- if $hasInput}}
        /**
         * {{$opID}}Input: an input stream of the bucket.<br>
         * The following is the description of fields.<br>
         * These fields are headers or bodies of the http request.<br>
         {{- range $id, $property := $operation.Request.Headers.Properties}}
         * field {{$property.Name| camelCase}} {{replace $property.Description "<bucket-name>/<object-key>" "'bucket-name'/'object-key'" -1}} <br>
         {{- end}}
         {{- range $id, $property := $operation.Request.Query.Properties}}
         * field {{$property.Name| camelCase}} {{replace $property.Description "<bucket-name>/<object-key>" "'bucket-name'/'object-key'" -1}} <br>
         {{- end}}
         {{- range $id, $property := $operation.Request.Elements.Properties}}
         * field {{$property.Name| camelCase}} {{replace $property.Description "<bucket-name>/<object-key>" "'bucket-name'/'object-key'" -1}} <br>
         {{- end}}
         */
        public static class {{$opID}}Input extends RequestInputModel {
            {{if $operation.Request.Query.Properties | len}}
                {{$data := $operation.Request.Query -}}
                {{template "RenderProperties" passThrough $data `query` $operation.Name}}
            {{end}}

            {{if $operation.Request.Headers.Properties | len}}
                {{- $data := $operation.Request.Headers -}}
                {{template "RenderProperties" passThrough $data `header` $operation.Name}}
            {{end}}

            {{if $operation.Request.Elements.Properties | len}}
                {{$data := $operation.Request.Elements -}}
                {{template "RenderProperties" passThrough $data `element` $operation.Name}}

                {{if $operation.Request.Body.Description -}}
                    /** {{$operation.Request.Body.Description}} */
                {{- end}}
                private String bodyInput;

                @ParamAnnotation(paramType = "body",paramName = "BodyInput")
                public String getBodyInput() {
                   return bodyInput;
                }
                /**
                * Set body with raw json string, After setting this field,
                * SDK will give priority to using this field as the payload,
                * at this time you can ignore the settings of other fields.
                * @param bodyInput body payload
                */
                public void setBodyInput(String bodyInput) {
                    this.bodyInput=bodyInput;
                }
            {{end}}

            {{if eq $operation.Request.Body.Type "string"}}
                {{if $operation.Request.Body.Description -}}
                    /** {{$operation.Request.Body.Description}} */
                {{- end}}
                private  String bodyInput;

                /**
                * Get the object json string.
                * @return object json string
                */
                @ParamAnnotation(paramType = "body",paramName = "BodyInput")
                public String getBodyInput() {
                   return bodyInput;
                }

                /**
                * Set the object json string.
                * @param bodyInput object json string
                */
                public void setBodyInput(String bodyInput) {
                    this.bodyInput=bodyInput;
                }

            {{else if eq $operation.Request.Body.Type "binary"}}
                {{if $operation.Request.Body.Description -}}
                    /** {{$operation.Request.Body.Description}} */
                {{- end}}
                private  File bodyInputFile;

                /**
                * Get the File will be updated.
                * @return the File object will be updated
                */
                @ParamAnnotation(paramType = "body",paramName = "BodyInputFile")
                public File getBodyInputFile() {
                   return bodyInputFile;
                }

                /**
                * Set the File to update. <br>
                {{if eq $opID "UploadMultipart" -}}
                * Deprecated, please use setBodyInputFilePart() to upload multi part. <br>
                * Then setFileOffset() and setContentLength() to get a part of a file or stream.
                {{- end}}
                * @param bodyInputFile File to update
                */
                {{if eq $opID "UploadMultipart" -}}
                @Deprecated
                {{- end}}
                public void setBodyInputFile(File bodyInputFile) {
                    this.bodyInputFile = bodyInputFile;
                }

                private InputStream bodyInputStream;

                /**
                * Get the body input stream.
                * @return input stream
                */
                @ParamAnnotation(paramType = "body",paramName = "BodyInputStream")
                public InputStream getBodyInputStream() {
                   return bodyInputStream;
                }

                /**
                * Set the body input stream.
                * @param bodyInputStream input stream to update
                */
                public void setBodyInputStream(InputStream bodyInputStream) {
                    this.bodyInputStream=bodyInputStream;
                }
            {{end}}

            {{if eq $opID "CompleteMultipartUpload" -}}
                public CompleteMultipartUploadInput() {}

                /**
                * The constructor will auto set values of upload id and body input.
                * @param multipart_upload_id upload id
                * @param partsCount count of multi parts
                * @param startIndex start of part number's index
                */
                @Deprecated
                public CompleteMultipartUploadInput(String multipart_upload_id, int partsCount, int startIndex) {
                    this.setUploadID(multipart_upload_id);
                    this.setBodyInput(getCompleteMultipartUploadContent(partsCount, startIndex));
                }

                /**
                 * You can get the json content to complete multipart uploading. <br>
                 * @param partsCount count of all the uploaded parts
                 * @param startIndex start of part number's index
                 * @return content to complete multipart uploading
                 */
                @Deprecated
                public String getCompleteMultipartUploadContent(int partsCount, int startIndex){
                    if (partsCount < 1 || startIndex < 0) return null;

                    StringBuilder uploadJson = new StringBuilder("{\"object_parts\":[");
                    for (int i = 0; i < partsCount; i++) {
                        uploadJson.append("{\"part_number\":").append(startIndex++).append("}");
                        if (i < partsCount - 1) uploadJson.append(",");
                        else uploadJson.append("]}");
                    }

                    return uploadJson.toString();
                }
            {{- end}}

            {{if eq $opID "UploadMultipart" -}}
                private Long fileOffset = -1L;

                /**
                 * You can set the offset of a file here. <br>
                 * Then use setContentLength() to get a part of a file.
                 * @param fileOffset fileOffset
                 */
                public void setFileOffset(Long fileOffset){
                    this.fileOffset = fileOffset;
                }

                /**
                 * Get the offset of the File or stream(default = -1).
                 * @return the offset of the File or stream
                 */
                @ParamAnnotation(paramType = "query",paramName = "file_offset")
                public Long getFileOffset() {
                    return fileOffset;
                }

                /**
                 * Set the File parts to update.
                 * @param bodyInputFilePart File part to update
                 */
                public void setBodyInputFilePart(File bodyInputFilePart) {
                    this.bodyInputFile = bodyInputFilePart;
                    fileOffset = 0L;
                }

                /**
                 * Get the File will be updated.
                 * @return the File part will be updated
                 */
                @ParamAnnotation(paramType = "body",paramName = "BodyInputFile")
                public File getBodyInputFilePart() {
                    return bodyInputFile;
                }
            {{- end}}

            @Override
            public String validateParam() {
                {{template "ValidateCustomizedType" $operation.Request.Query}}
                {{template "ValidateCustomizedType" $operation.Request.Headers}}
                {{if $operation.Request.Elements.Properties | len}}
                    if (!QSStringUtil.isEmpty(this.getBodyInput())) {
                        return null;
                    }
                {{end}}
                {{template "ValidateCustomizedType" $operation.Request.Elements}}
                return null;
            }
        }
    {{end}}

    /**
    * {{$opID}}Output: an output stream of the bucket.<br>
    * The following is the desc of fields.<br>
    * These fields are headers or bodies of the http request.<br>
    {{- range $id, $property := $operation.Request.Headers.Properties}}
    * field {{$property.Name| camelCase}} {{replace $property.Description "<bucket-name>/<object-key>" "'bucket-name'/'object-key'" -1}} <br>
    {{- end}}
    {{- range $id, $property := $operation.Request.Query.Properties}}
    * field {{$property.Name| camelCase}} {{replace $property.Description "<bucket-name>/<object-key>" "'bucket-name'/'object-key'" -1}} <br>
    {{- end}}
    {{- range $id, $property := $operation.Request.Elements.Properties}}
    * field {{$property.Name| camelCase}} {{replace $property.Description "<bucket-name>/<object-key>" "'bucket-name'/'object-key'" -1}} <br>
    {{- end}}
    */
    public static class {{$opID}}Output extends OutputModel{
        {{range $_, $response := $operation.Responses}}
            {{if eq $response.Body.Type "string"}}
                {{if $response.Body.Description -}}
                    /** {{$response.Body.Description}} */
                {{- end}}
                private  String bodyInput;

                /**
                * Get the object json string.
                * @return object json string
                */
                @ParamAnnotation(paramType = "body",paramName = "BodyInput")
                public String getBodyInput() {
                   return bodyInput;
                }

                /**
                * Set the object json string.
                * @param bodyInput object json string
                */
                public void setBodyInput(String bodyInput) {
                    this.bodyInput=bodyInput;
                }
            {{else if eq $response.Body.Type "binary"}}
                {{if $response.Body.Description -}}
                    /** {{$response.Body.Description}} */
                {{- end}}

                {{if eq $opID "GetObject"}}
                    /**
                    * deprecated, please use setCacheControl(String cacheControl)
                    * @param responseCacheControl cacheControl
                    */
                    @Deprecated
                    public void setResponseCacheControl(String responseCacheControl) {
                        cacheControl = responseCacheControl;
                    }

                    /**
                    * deprecated, please use getCacheControl()
                    * @return cacheControl
                    */
                    @Deprecated
                    public String getResponseCacheControl() {
                        return cacheControl;
                    } // Specified the Content-Disposition response header

                    /**
                    * deprecated, please use setContentDisposition(String contentDisposition)
                    * @param responseContentDisposition contentDisposition
                    */
                    @Deprecated
                    public void setResponseContentDisposition(String responseContentDisposition) {
                        contentDisposition = responseContentDisposition;
                    }

                    /**
                    * deprecated, please use getContentDisposition()
                    * @return contentDisposition
                    */
                    @Deprecated
                    public String getResponseContentDisposition() {
                        return contentDisposition;
                    } // Specified the Content-Disposition header

                    /**
                    * deprecated, please use setContentEncoding(String contentEncoding)
                    * @param responseContentEncoding contentEncoding
                    */
                    @Deprecated
                    public void setResponseContentEncoding(String responseContentEncoding) {
                        contentEncoding = responseContentEncoding;
                    }

                    /**
                    * deprecated, please use getContentEncoding()
                    * @return contentEncoding
                    */
                    @Deprecated
                    public String getResponseContentEncoding() {
                        return contentEncoding;
                    } // Specified the Content-Language response header

                    /**
                    * deprecated, please use setContentLanguage(String contentLanguage)
                    * @param responseContentLanguage contentLanguage
                    */
                    @Deprecated
                    public void setResponseContentLanguage(String responseContentLanguage) {
                        contentLanguage = responseContentLanguage;
                    }

                    /**
                    * deprecated, please use getContentLanguage()
                    * @return contentLanguage
                    */
                    @Deprecated
                    public String getResponseContentLanguage() {
                        return contentLanguage;
                    } // Specified the Content-Type response header

                    /**
                    * deprecated, please use setContentType(String contentType)
                    * @param responseContentType contentType
                    */
                    @Deprecated
                    public void setResponseContentType(String responseContentType) {
                        contentType = responseContentType;
                    }

                    /**
                    * deprecated, please use getContentType()
                    * @return contentType
                    */
                    @Deprecated
                    public String getResponseContentType() {
                        return contentType;
                    } // Specified the Expires response header

                    /**
                    * deprecated, please use setExpires(String expires)
                    * @param responseExpires expires
                    */
                    @Deprecated
                    public void setResponseExpires(String responseExpires) {
                        expires = responseExpires;
                    }

                    /**
                    * deprecated, please use getExpires()
                    * @return expires
                    */
                    @Deprecated
                    public String getResponseExpires() {
                        return expires;
                    }
                {{- end}}

                private InputStream bodyInputStream;

                /**
                * Get the stream will be downloaded.
                * @return the stream will be downloaded
                */
                @ParamAnnotation(paramType = "body",paramName = "BodyInputStream")
                public InputStream getBodyInputStream() {
                   return bodyInputStream;
                }

                /**
                * Set the stream to download.
                * @param bodyInputStream stream to download
                */
                public void setBodyInputStream(InputStream bodyInputStream) {
                    this.bodyInputStream=bodyInputStream;
                }
            {{end}}

            {{if $response.Elements.Properties | len}}
                {{$data := $response.Elements}}
                {{template "RenderProperties" passThrough $data `element` $operation.Name}}
            {{end}}

            {{if $response.Headers.Properties | len}}
                {{$data := $response.Headers}}
                {{template "RenderProperties" passThrough $data `header` $operation.Name}}
            {{end}}
        {{end}}
    }

{{end}}
