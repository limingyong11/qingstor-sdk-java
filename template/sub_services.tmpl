// +-------------------------------------------------------------------------
// | Copyright (C) 2016 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------

{{$service := .Data.Service}}
{{$subServices := .Data.SubServices }}

package com.qingstor.sdk.service;

import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.qingstor.sdk.annotation.ParamAnnotation;
import com.qingstor.sdk.config.EvnContext;
import com.qingstor.sdk.constants.QSConstant;
import com.qingstor.sdk.exception.QSException;
import com.qingstor.sdk.request.ResourceRequestFactory;
import com.qingstor.sdk.model.OutputModel;
import com.qingstor.sdk.model.RequestInputModel;
import com.qingstor.sdk.utils.QSStringUtil;
import com.qingstor.sdk.service.Types.*;
import com.qingstor.sdk.utils.QSSignatureUtil;
import com.qingstor.sdk.request.ResponseCallBack;
import com.qingstor.sdk.request.RequestHandler;

import okhttp3.Request;

public class Bucket {
    private String zone;
    private String bucketName;
    private EvnContext evnContext;

    public Bucket(EvnContext evnContext, String zone,String bucketName) {
        this.evnContext = evnContext;
        this.zone = zone;
        this.bucketName = bucketName;
    }

    {{range $_, $subService := $subServices}}
      {{range $_, $operation := $subService.Operations}}
        {{$belongs := printf "%s" ($subService.Name | camelCase)}}
        {{template "RenderOperation" passThrough $belongs $operation}}
      {{end}}

      {{ if eq $subService.Name "Object"}}
        /**
         *
         * @param objectName name of the object
         * @param expiresSecond  Relative current time，the second when this quert sign expires
         * @return signature url
         * @throws QSException exception
         */
         @Deprecated
        public String GetObjectSignatureUrl(String objectName,int expiresSecond) throws QSException{
            return QSSignatureUtil.getObjectAuthRequestUrl(this.evnContext,this.zone,bucketName,objectName,expiresSecond);
        }

        /**
         * @param objectName name of the object
         * @param expires time to expire
         * @return signature url
         * @throws QSException exception
         * Documentation URL: https://docs.qingcloud.com/qingstor/api/common/signature.html
         */
        public String GetObjectSignatureUrl(String objectName, long expires) throws QSException {
            RequestHandler requestHandler = this.GetObjectBySignatureUrlRequest(objectName, null, expires);
            return requestHandler.getExpiresRequestUrl();
        }

        /**
         * @param objectName name of the object
         * @param expires  Relative current time，the second when this quert sign expires
         * @return request handle
         * @throws QSException exception
         * Documentation URL: https://docs.qingcloud.com/qingstor/api/common/signature.html
         */
        @SuppressWarnings({"rawtypes", "unchecked"})
        public RequestHandler GetObjectBySignatureUrlRequest(String objectName, GetObjectInput input, long expires)
                throws QSException {

            Map context = new HashMap();
            context.put(QSConstant.PARAM_KEY_REQUEST_ZONE, this.zone);
            context.put(QSConstant.EVN_CONTEXT_KEY, this.evnContext);
            context.put(QSConstant.PARAM_KEY_EXPIRES, String.valueOf(expires));
            context.put("OperationName", "GetObject");
            context.put("APIName", "GetObject");
            context.put("ServiceName", "Get Object");
            context.put("RequestMethod", "GET");
            context.put("RequestURI", "/<bucket-name>/<object-key>");
            context.put("bucketNameInput", this.bucketName);
            context.put("objectNameInput", objectName);

            if (QSStringUtil.isEmpty(bucketName)) {
                throw new QSException("bucketName can't be empty!");
            }
            if (QSStringUtil.isEmpty(objectName)) {
                throw new QSException("objectName can't be empty!");
            }

            if(input == null){
                input = new GetObjectInput();
            }

            RequestHandler requestHandler = ResourceRequestFactory.getResourceRequest().getRequest(context, input, OutputModel.class);

            return requestHandler;
        }

        /**
         * @param signaturedRequest Signature Url
         * @return GetObjectOutput
         * @throws QSException exception
         */
        @SuppressWarnings({"rawtypes", "unchecked"})
        public GetObjectOutput GetObjectBySignatureUrl(String signaturedRequest) throws QSException {
            Map context = new HashMap();
            context.put(QSConstant.PARAM_KEY_REQUEST_ZONE, this.zone);
            context.put(QSConstant.EVN_CONTEXT_KEY, this.evnContext);
            context.put("OperationName", "GetObject");
            context.put("APIName", "GetObject");
            context.put("ServiceName", "QingStor");
            context.put("RequestMethod", "GET");
            context.put("RequestURI", "/<bucket-name>/<object-key>");

            Object backModel =
                    ResourceRequestFactory.getResourceRequest()
                            .sendApiRequest(signaturedRequest, context, GetObjectOutput.class);
            if (backModel != null) {
                return (GetObjectOutput) backModel;
            }
            return null;
        }

        /**
         * @param signaturedRequest Signature Url
         * @param callback callback
         * @throws QSException exception
         */
        @SuppressWarnings({"rawtypes", "unchecked"})
        public void GetObjectBySignatureUrlAsync(
                String signaturedRequest, ResponseCallBack<GetObjectOutput> callback)
                throws QSException {
            Map context = new HashMap();
            context.put(QSConstant.PARAM_KEY_REQUEST_ZONE, this.zone);
            context.put(QSConstant.EVN_CONTEXT_KEY, this.evnContext);
            context.put("OperationName", "GetObject");
            context.put("APIName", "GetObject");
            context.put("ServiceName", "QingStor");
            context.put("RequestMethod", "GET");
            context.put("RequestURI", "/<bucket-name>/<object-key>");

            if (callback == null) {
                throw new QSException("callback can't be null");
            }

            ResourceRequestFactory.getResourceRequest()
                    .sendApiRequestAsync(signaturedRequest, context, callback);
        }
      {{end}}
    {{end}}
}
