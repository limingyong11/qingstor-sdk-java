{{$service := .Data.Service}}
{{$subServices := .Data.SubServices }}

package com.qingstor.sdk.service;

import java.io.File;
import java.io.InputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.qingstor.sdk.annotation.ParamAnnotation;
import com.qingstor.sdk.common.auth.Credentials;
import com.qingstor.sdk.config.ClientConfiguration;
import com.qingstor.sdk.config.EnvContext;
import com.qingstor.sdk.constants.QSConstant;
import com.qingstor.sdk.exception.QSException;
import com.qingstor.sdk.model.OutputModel;
import com.qingstor.sdk.model.RequestInputModel;
import com.qingstor.sdk.utils.QSParamInvokeUtil;
import com.qingstor.sdk.utils.QSStringUtil;
import com.qingstor.sdk.service.Types.*;
import com.qingstor.sdk.utils.QSSignatureUtil;
import com.qingstor.sdk.request.ResponseCallBack;
import com.qingstor.sdk.request.RequestHandler;
import com.qingstor.sdk.request.QSRequest;
import com.qingstor.sdk.common.OperationContext;

/**
 * Most of operations in qingstor can be found in this class.<br>
 * Usage:
 * <pre>
 * EnvContext env = new EnvContext("ACCESS_KEY_ID_EXAMPLE", "SECRET_ACCESS_KEY_EXAMPLE");
 * String zoneName = "pek3a";
 * String bucketName = "testBucketName";
 * Bucket bucket = new Bucket(env, zoneKey, bucketName);
 * </pre>
 * Now you can use the object bucket to do the operations.
 *
 * Note: If your endpoint is configured as a raw ip or localhost, the zone parameter in constructor can be ignored.
 */
public class Bucket {
    private String zone;
    private String bucketName;
    private Credentials cred;
    private ClientConfiguration clientCfg;

    public Bucket(EnvContext envContext, String zone, String bucketName) {
        this.cred = envContext;
        this.clientCfg = ClientConfiguration.from(envContext);
        this.zone = zone;
        this.bucketName = bucketName;
    }

    // Provided for {@code QingStor#getBucket()} only currently.
    Bucket(Credentials cred, ClientConfiguration clientCfg, String zone, String bucketName) {
        this.cred = cred;
        this.clientCfg = clientCfg;
        this.zone = zone;
        this.bucketName = bucketName;
    }

    {{range $_, $subService := $subServices}}
      {{range $_, $operation := $subService.Operations}}
        {{template "RenderOperation" passThrough $subService $operation}}
      {{end}}

      {{ if eq $subService.Name "Object"}}
        /**
         * @param objectName name of the object
         * @param expires time to expire
         * @return signature url
         * @throws QSException exception
         * Documentation URL: <a href="https://docs.qingcloud.com/qingstor/api/common/signature.html">https://docs.qingcloud.com/qingstor/api/common/signature.html</a>
         */
        public String GetObjectSignatureUrl(String objectName, long expires) throws QSException {
            RequestHandler requestHandler = this.GetObjectBySignatureUrlRequest(objectName, null, expires);
            return requestHandler.getExpiresRequestUrl();
        }

        /**
         * @param objectName name of the object
         * @param input get object input
         * @param expires  Relative current timeï¼Œthe second when this quert sign expires
         * @return request handle
         * @throws QSException exception
         * Documentation URL: <a href="https://docs.qingcloud.com/qingstor/api/common/signature.html">https://docs.qingcloud.com/qingstor/api/common/signature.html</a>
         */
        @SuppressWarnings({"rawtypes", "unchecked"})
        public RequestHandler GetObjectBySignatureUrlRequest(String objectName, GetObjectInput input, long expires)
                throws QSException {

            OperationContext.OperationContextBuilder builder = OperationContext.builder();
            builder.clientCfg(this.clientCfg)
                    .zone(this.zone)
                    .credentials(this.cred)
                    .expires(String.valueOf(expires))
                    .operationName("GetObject")
                    .apiName("GetObject")
                    .serviceName("Get Object")
                    .reqMethod("GET")
                    .subSourcePath("/<bucket-name>/<object-key>")
                    .bucketName(this.bucketName)
                    .objKey(objectName);

            if (QSStringUtil.isEmpty(bucketName)) {
                throw new QSException("bucketName can't be empty!");
            }
            if (QSStringUtil.isEmpty(objectName)) {
                throw new QSException("objectName can't be empty!");
            }

            if(input == null){
                input = new GetObjectInput();
            }

            RequestHandler requestHandler = QSRequest.getRequest(builder.build(), input, OutputModel.class);

            return requestHandler;
        }

        /**
         * @param signaturedRequest Signature Url
         * @return GetObjectOutput
         * @throws QSException exception
         */
        @SuppressWarnings({"rawtypes", "unchecked"})
        public GetObjectOutput GetObjectBySignatureUrl(String signaturedRequest) throws QSException {
            OperationContext.OperationContextBuilder builder = OperationContext.builder();
            builder.clientCfg(this.clientCfg)
                    .zone(this.zone)
                    .credentials(this.cred)
                    .operationName("GetObject")
                    .apiName("GetObject")
                    .serviceName("QingStor")
                    .reqMethod("GET")
                    .subSourcePath("/<bucket-name>/<object-key>");

            Object backModel =
                    QSRequest
                            .sendApiRequest(signaturedRequest, builder.build(), GetObjectOutput.class);
            if (backModel != null) {
                return (GetObjectOutput) backModel;
            }
            return null;
        }

        /**
         * @param signaturedRequest Signature Url
         * @param callback callback
         * @throws QSException exception
         */
        @SuppressWarnings({"rawtypes", "unchecked"})
        public void GetObjectBySignatureUrlAsync(
                String signaturedRequest, ResponseCallBack<GetObjectOutput> callback)
                throws QSException {
            OperationContext.OperationContextBuilder builder = OperationContext.builder();
            builder.clientCfg(this.clientCfg)
                    .zone(this.zone)
                    .credentials(this.cred)
                    .operationName("GetObject")
                    .apiName("GetObject")
                    .serviceName("QingStor")
                    .reqMethod("GET")
                    .subSourcePath("/<bucket-name>/<object-key>");

            if (callback == null) {
                throw new QSException("callback can't be null");
            }

            QSRequest
                    .sendApiRequestAsync(signaturedRequest, builder.build(), callback);
        }
      {{end}}
    {{end}}

    /**
     * @param objectName name of the object
     * @param input input
     * @param expires expires
     * @throws QSException exception
     * @return RequestHandler http request handler Documentation URL: <a
     *     href="https://docs.qingcloud.com/qingstor/data_process/image_process/index.html">https://docs.qingcloud.com/qingstor/data_process/image_process/index.html</a>
     */
     @SuppressWarnings({"rawtypes", "unchecked"})
     public RequestHandler imageProcessExpiredUrlRequest(String objectName, ImageProcessInput input, long expires)
            throws QSException {

        if (input == null) {
            input = new ImageProcessInput();
        }

        OperationContext.OperationContextBuilder builder = OperationContext.builder();
        builder.clientCfg(this.clientCfg)
                .zone(this.zone)
                .credentials(this.cred)
                .operationName("ImageProcess")
                .apiName("ImageProcess")
                .serviceName("Image Process")
                .reqMethod("GET")
                .subSourcePath("/<bucket-name>/<object-key>?image")
                .bucketName(this.bucketName)
                .objKey(objectName);

        if (expires > System.currentTimeMillis()/1000)
            builder.expires(String.valueOf(expires));

        if (QSStringUtil.isEmpty(bucketName)) {
            throw new QSException("bucketName can't be empty!");
        }
        if (QSStringUtil.isEmpty(objectName)) {
            throw new QSException("objectName can't be empty!");
        }

        RequestHandler requestHandler =
            QSRequest
            .getRequest(builder.build(), input, ImageProcessOutput.class);

        return requestHandler;
     }
}
